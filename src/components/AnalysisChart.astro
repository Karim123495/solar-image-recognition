---
// AnalysisChart组件
export interface Props {
  data?: any[];
  type?: 'bar' | 'line' | 'pie';
  title?: string;
}

const { data = [], type = 'bar', title = '分析图表' } = Astro.props;
---

<div class="card">
  <div class="card-header">
    <h2 class="text-lg font-semibold text-gray-900">{title}</h2>
  </div>
  <div class="card-body">
    <div id="chart-container" class="w-full h-64">
      {data.length === 0 ? (
        <div class="flex items-center justify-center h-full text-gray-500">
          <div class="text-center">
            <svg class="w-12 h-12 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
            <p>暂无数据</p>
          </div>
        </div>
      ) : (
        <div class="space-y-4">
          {type === 'bar' && (
            <div class="space-y-3">
              {data.map((item, index) => (
                <div class="flex items-center">
                  <div class="w-20 text-sm text-gray-600 truncate">{item.label}</div>
                  <div class="flex-1 mx-3">
                    <div class="bg-gray-200 rounded-full h-4">
                      <div 
                        class="bg-primary-600 h-4 rounded-full transition-all duration-300"
                        style={`width: ${item.value}%`}
                      ></div>
                    </div>
                  </div>
                  <div class="w-12 text-sm font-medium text-gray-900 text-right">{item.value}%</div>
                </div>
              ))}
            </div>
          )}
          
          {type === 'pie' && (
            <div class="flex items-center justify-center">
              <div class="relative w-48 h-48">
                <svg class="w-full h-full transform -rotate-90" viewBox="0 0 100 100">
                  {(() => {
                    let cumulativePercentage = 0;
                    const colors = ['#0ea5e9', '#eab308', '#22c55e', '#f59e0b', '#ef4444'];
                    
                    return data.map((item, index) => {
                      const percentage = item.value;
                      const strokeDasharray = `${percentage * 3.14159} ${3.14159 * 100}`;
                      const strokeDashoffset = -cumulativePercentage * 3.14159;
                      cumulativePercentage += percentage;
                      
                      return (
                        <circle
                          key={index}
                          cx="50"
                          cy="50"
                          r="40"
                          fill="none"
                          stroke={colors[index % colors.length]}
                          strokeWidth="8"
                          strokeDasharray={strokeDasharray}
                          strokeDashoffset={strokeDashoffset}
                        />
                      );
                    });
                  })()}
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="text-center">
                    <div class="text-2xl font-bold text-gray-900">{data.reduce((sum, item) => sum + item.value, 0)}%</div>
                    <div class="text-sm text-gray-600">总计</div>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {type === 'line' && (
            <div class="relative">
              <svg class="w-full h-40" viewBox="0 0 400 160">
                <defs>
                  <linearGradient id="lineGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="0%" style="stop-color:#0ea5e9;stop-opacity:0.3" />
                    <stop offset="100%" style="stop-color:#0ea5e9;stop-opacity:0" />
                  </linearGradient>
                </defs>
                <polyline
                  fill="url(#lineGradient)"
                  stroke="#0ea5e9"
                  stroke-width="2"
                  points={data.map((item, index) => 
                    `${(index / (data.length - 1)) * 380 + 10},${160 - (item.value / 100) * 140}`
                  ).join(' ')}
                />
                {data.map((item, index) => (
                  <circle
                    key={index}
                    cx={(index / (data.length - 1)) * 380 + 10}
                    cy={160 - (item.value / 100) * 140}
                    r="3"
                    fill="#0ea5e9"
                  />
                ))}
              </svg>
              <div class="flex justify-between text-xs text-gray-500 mt-2">
                {data.map((item, index) => (
                  <span key={index}>{item.label}</span>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
    
    {data.length > 0 && (
      <div class="mt-4 pt-4 border-t border-gray-200">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          {data.map((item, index) => (
            <div key={index} class="flex items-center">
              <div 
                class="w-3 h-3 rounded-full mr-2"
                style={`background-color: ${type === 'pie' ? ['#0ea5e9', '#eab308', '#22c55e', '#f59e0b', '#ef4444'][index % 5] : '#0ea5e9'}`}
              ></div>
              <span class="text-gray-600">{item.label}: {item.value}%</span>
            </div>
          ))}
        </div>
      </div>
    )}
  </div>
</div>

<script define:vars={{ data, type }}>
  // 图表交互功能
  document.addEventListener('DOMContentLoaded', function() {
    const chartContainer = document.getElementById('chart-container');
    
    if (data.length > 0 && type === 'bar') {
      // 添加条形图悬停效果
      const bars = chartContainer.querySelectorAll('[style*="width:"]');
      bars.forEach((bar, index) => {
        bar.addEventListener('mouseenter', function() {
          this.style.backgroundColor = '#0369a1';
        });
        bar.addEventListener('mouseleave', function() {
          this.style.backgroundColor = '#0ea5e9';
        });
      });
    }
    
    if (data.length > 0 && type === 'line') {
      // 添加折线图悬停效果
      const circles = chartContainer.querySelectorAll('circle');
      circles.forEach((circle, index) => {
        circle.addEventListener('mouseenter', function() {
          this.setAttribute('r', '5');
          this.style.fill = '#0369a1';
        });
        circle.addEventListener('mouseleave', function() {
          this.setAttribute('r', '3');
          this.style.fill = '#0ea5e9';
        });
      });
    }
  });
</script>
